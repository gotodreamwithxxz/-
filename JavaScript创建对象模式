创建对象：
  1.工厂模式，抽象了创建具体对象的过程（解决了多个相似对象的问题，但没有解决对象识别的问题）
  2.构造函数模式，对象具有constructor属性，指向构造名。问题是每个对象的方法都要在函数内部重新创建一遍；若把对象方法放在外面使用，则对象用多个方法就要
定义多个全局函数，这样自定义的引用类型就毫无封装性可言！ so 出现了原型模式
  3.原型（prototype）模式，解决让所有对象共享它所包含的属性和方法。理解ECMAScript中的原型对象
    .给对象实例添加一个属性时，这个属性会屏蔽原型对象中保存的同名属性。若用delete操作符删除这个属性，则会恢复原型中的属性值。
    .hasOwnProperty()对象的方法，检测访问的是实例属性则返回true，原型属性则为false
    .hasPrptotypeProperty(对象名，属性名)，和hasOwnProperty()相反
    .in操作符，不管是实例属性还是原型属性都返回true，不存在为false
    说了这么多，它有什么问题呢？ 对象的引用类型的值由所有实例共享，不能和基本值属性值一样隐藏------
  4.组合使用构造函数模型和原型模型
    这样每个实例都会有自己的实例属性的副本，还可以同时共享对方法的引用**
  5.动态原型模式
  6.寄生构造函数模式
  7.稳妥构造函数模式
    所谓稳妥，即是没有公共属性
    //1.原型对象
        function Person() {
        }

        Person.prototype.name = "lijiaqi";
        Person.prototype.age = 24;
        Person.prototype.sayName = function () {
            return this.name;
        };

        var person1 = new Person();
        console.log(person1.constructor === Person);  //true
    //2.更简单的原型对象
        //缺点constructor变为Object
        function Dog() {
        }
        Dog.prototype = {
            name : "xiaohua",
            age : 4,
            sayName :function () {
                return this.name;
            }
        };

        var dog1 = new Dog();
        console.log(dog1.constructor === Dog);   //false
        console.log(dog1.constructor === Object);  //true
    //3.修正constructor简单的原型对象
        //son属性值是引用类型，会造成一个实例改变，另外一个也跟着改变
        function Dog1() {
        }
        Dog.prototype = {
            name : "xiaohua",
            age : 4,
            son : ["haha","gaga","lala"],
            sayName :function () {
                return this.name;
            }
        };
        Object.defineProperty(Dog.prototype , "constructor" , {
            enumerable : false,
            value : Dog
        });
        var dog2 = new Dog1();
        console.log(dog2.constructor === Dog1);   //true

    //4.组合使用构造函数与原型模式
        function Cat() {
            this.name = "xiaomao";
            this.age = 6;
            this.son = ["maoyi","maoer","maosan"];
        }
        Cat.prototype = {
            sayName :function () {
                return this.name;
            }
        };
        var cat1 = new Cat();
        var cat2 = new Cat();
        cat1.son.push("maosi");
        console.log(cat1.son === cat2.son); //false
        console.log(cat2);

    //5.寄生的构造函数模式(不能依赖instanceof来确认对象类型)
        function Jisheng(name, age, job) {
            var o = new Object();
            o.name = name;
            o.age = age;
            o.job = job;
            o.sayName = function(){
                return this.name;
            };
            return o;
        }
        var jisheng = new Jisheng("jish",55,"teacher");
        console.log(jisheng instanceof Jisheng);    //false
        console.log(typeof jisheng);   //Object
        console.log(jisheng.sayName());   //jish

    //6.稳妥的构造函数模式（与寄生的构造函数模式相似，俩点不同：1.对象实例方法不引用this。2.不使用new操作符调用构造函数）
        function Wentuo(name, age, job) {
            var o = new Object();
            o.name = name;
            o.age = age;
            o.job = job;
            o.sayName = function(){
                return name;
            };
            return o;
        }
        var wentuo = Wentuo("went",45,"doctor");
        console.log(wentuo.sayName());    //went
